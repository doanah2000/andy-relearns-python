List Operations:

list.append(x)
- Adds an item to the end of the list. Similar to a[len(a):] = [x]

list.extend(iterable)
- Extends the list by appending all the items from the iterable. Similar to a[len(a):] = iterable

list.insert(i, x)
- Insert an item at a given position. The first argument is the index of the element before which to insert
- ex: a.insert(0,x) inserts at the front off the list, a.insert(len(a), x) is equivalent to a.append(x)

list.remove(x)
- Remove the first item from the list whose value is equal to x. It raises a ValueError if there is no such item

list.pop([i])
- Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and
returns the last item in the list. It raises an IndexError if the list is empty or the index is outside the list range.

list.clear()
- Remove all items from the list. Similar to del a[:]

list.index(x[, start [, end]])
- Return zero-based index in the list of the first item whose value is equal to x. Raises a ValueError if there is no
such item. Optional arguments `start` and `end` are interpreted as in the slice notation and are used to limit the
search to a particular subsequence of the list. Returned index computed relative to the full sequence

list.count(x)
- Return the number off time x appears in the list

list.sort(*, key=None, reverse=false)
- Sort the items of the list in place (argurments can be used for sort customization, see sorted() for the explanation).

list.reverse()
- Reverse the elements of the list in place

list.copy()
- Return a shallow copy of the list. Similar to a[:]